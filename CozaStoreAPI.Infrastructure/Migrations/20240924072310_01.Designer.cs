// <auto-generated />
using System;
using CozaStoreAPI.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CozaStoreAPI.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240924072310_01")]
    partial class _01
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CozaStoreAPI.Infrastructure.Data.Models.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasComment("First Name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasComment("Last Name");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<string>("ShippingCity")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasComment("User's shipping city");

                    b.Property<string>("ShippingOffice")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasComment("User's shipping office");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("f9abd5a2-6215-479d-9e2c-d18cb27a912a"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a69e6f97-15ad-4981-b3db-ad811bc5c19a",
                            Email = "test@test.com",
                            EmailConfirmed = true,
                            FirstName = "TestFirstName",
                            LastName = "TestLastName",
                            LockoutEnabled = false,
                            NormalizedEmail = "TEST@TEST.COM",
                            NormalizedUserName = "TEST@TEST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELexmPuGGNE7bYgYxT0SO/oxRFmDg7qP7F2BeP2eOdl4UdNtq5ppc5YzHrz18udC8Q==",
                            PhoneNumberConfirmed = false,
                            ShippingCity = "",
                            ShippingOffice = "",
                            TwoFactorEnabled = false,
                            UserName = "test@test.com"
                        });
                });

            modelBuilder.Entity("CozaStoreAPI.Infrastructure.Data.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasComment("The category's primary key");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("The category's name");

                    b.HasKey("Id");

                    b.ToTable("Categories", t =>
                        {
                            t.HasComment("The category of the product");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "women"
                        },
                        new
                        {
                            Id = 2,
                            Name = "man"
                        },
                        new
                        {
                            Id = 3,
                            Name = "shoes"
                        },
                        new
                        {
                            Id = 4,
                            Name = "watches"
                        },
                        new
                        {
                            Id = 5,
                            Name = "bag"
                        });
                });

            modelBuilder.Entity("CozaStoreAPI.Infrastructure.Data.Models.Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasComment("The color's primary key");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("The color's name");

                    b.HasKey("Id");

                    b.ToTable("Colors", t =>
                        {
                            t.HasComment("The color of the product");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "White"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Black"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Red"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Green"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Blue"
                        });
                });

            modelBuilder.Entity("CozaStoreAPI.Infrastructure.Data.Models.ImageProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasComment("The image id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ImageOrder")
                        .HasColumnType("integer")
                        .HasComment("The image's order in slider");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)")
                        .HasComment("The path of the image");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ImageProducts", t =>
                        {
                            t.HasComment("The image of the product");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImageOrder = 1,
                            ImagePath = "/images/product-01.jpg",
                            ProductId = 1
                        },
                        new
                        {
                            Id = 2,
                            ImageOrder = 2,
                            ImagePath = "/images/product-02.jpg",
                            ProductId = 1
                        },
                        new
                        {
                            Id = 3,
                            ImageOrder = 1,
                            ImagePath = "/images/product-02.jpg",
                            ProductId = 2
                        },
                        new
                        {
                            Id = 4,
                            ImageOrder = 1,
                            ImagePath = "/images/product-03.jpg",
                            ProductId = 3
                        },
                        new
                        {
                            Id = 5,
                            ImageOrder = 1,
                            ImagePath = "/images/product-04.jpg",
                            ProductId = 4
                        },
                        new
                        {
                            Id = 6,
                            ImageOrder = 1,
                            ImagePath = "/images/product-05.jpg",
                            ProductId = 5
                        },
                        new
                        {
                            Id = 7,
                            ImageOrder = 1,
                            ImagePath = "/images/product-06.jpg",
                            ProductId = 6
                        },
                        new
                        {
                            Id = 8,
                            ImageOrder = 1,
                            ImagePath = "/images/product-07.jpg",
                            ProductId = 7
                        },
                        new
                        {
                            Id = 9,
                            ImageOrder = 1,
                            ImagePath = "/images/product-08.jpg",
                            ProductId = 8
                        },
                        new
                        {
                            Id = 10,
                            ImageOrder = 1,
                            ImagePath = "/images/product-09.jpg",
                            ProductId = 9
                        },
                        new
                        {
                            Id = 11,
                            ImageOrder = 1,
                            ImagePath = "/images/product-10.jpg",
                            ProductId = 10
                        },
                        new
                        {
                            Id = 12,
                            ImageOrder = 1,
                            ImagePath = "/images/product-11.jpg",
                            ProductId = 11
                        },
                        new
                        {
                            Id = 13,
                            ImageOrder = 1,
                            ImagePath = "/images/product-12.jpg",
                            ProductId = 12
                        },
                        new
                        {
                            Id = 14,
                            ImageOrder = 1,
                            ImagePath = "/images/product-13.jpg",
                            ProductId = 13
                        },
                        new
                        {
                            Id = 15,
                            ImageOrder = 1,
                            ImagePath = "/images/product-14.jpg",
                            ProductId = 14
                        },
                        new
                        {
                            Id = 16,
                            ImageOrder = 1,
                            ImagePath = "/images/product-15.jpg",
                            ProductId = 15
                        },
                        new
                        {
                            Id = 17,
                            ImageOrder = 1,
                            ImagePath = "/images/product-16.jpg",
                            ProductId = 16
                        });
                });

            modelBuilder.Entity("CozaStoreAPI.Infrastructure.Data.Models.ImageReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasComment("The image id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)")
                        .HasComment("The path of the image");

                    b.Property<int>("ReviewId")
                        .HasColumnType("integer")
                        .HasComment("The review id");

                    b.HasKey("Id");

                    b.HasIndex("ReviewId");

                    b.ToTable("ImageReviews", t =>
                        {
                            t.HasComment("The image of the review");
                        });
                });

            modelBuilder.Entity("CozaStoreAPI.Infrastructure.Data.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasComment("The product's primary key");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("integer")
                        .HasComment("The product's category id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("The product's created date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("The product's description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasComment("The product is deleted or not");

                    b.Property<string>("Material")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("The product's material");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("The product's name");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("The product's price");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("The product's updated date");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products", t =>
                        {
                            t.HasComment("The product");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 9, 24, 10, 23, 10, 188, DateTimeKind.Unspecified).AddTicks(8868), new TimeSpan(0, 3, 0, 0, 0)),
                            Description = "Description of product Esprit Ruffle Shirt",
                            IsDeleted = false,
                            Material = "60% cotton, 40% polyester",
                            Name = "Esprit Ruffle Shirt",
                            Price = 16.64m,
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 9, 24, 10, 23, 10, 188, DateTimeKind.Unspecified).AddTicks(8930), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 9, 24, 10, 23, 10, 188, DateTimeKind.Unspecified).AddTicks(8935), new TimeSpan(0, 3, 0, 0, 0)),
                            Description = "Description of product Herschel supply",
                            IsDeleted = false,
                            Material = "60% cotton, 40% polyester",
                            Name = "Herschel supply",
                            Price = 35.31m,
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 9, 24, 10, 23, 10, 188, DateTimeKind.Unspecified).AddTicks(8938), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 2,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 9, 24, 10, 23, 10, 188, DateTimeKind.Unspecified).AddTicks(8943), new TimeSpan(0, 3, 0, 0, 0)),
                            Description = "Description of product Only Check Trouser",
                            IsDeleted = false,
                            Material = "60% cotton, 40% polyester",
                            Name = "Only Check Trouser",
                            Price = 25.50m,
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 9, 24, 10, 23, 10, 188, DateTimeKind.Unspecified).AddTicks(8945), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 9, 24, 10, 23, 10, 188, DateTimeKind.Unspecified).AddTicks(8949), new TimeSpan(0, 3, 0, 0, 0)),
                            Description = "Description of product Classic Trench Coat",
                            IsDeleted = false,
                            Material = "60% cotton, 40% polyester",
                            Name = "Classic Trench Coat",
                            Price = 75.00m,
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 9, 24, 10, 23, 10, 188, DateTimeKind.Unspecified).AddTicks(8952), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 9, 24, 10, 23, 10, 188, DateTimeKind.Unspecified).AddTicks(8956), new TimeSpan(0, 3, 0, 0, 0)),
                            Description = "Description of product Front Pocket Jumper",
                            IsDeleted = false,
                            Material = "60% cotton, 40% polyester",
                            Name = "Front Pocket Jumper",
                            Price = 34.75m,
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 9, 24, 10, 23, 10, 188, DateTimeKind.Unspecified).AddTicks(8959), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 4,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 9, 24, 10, 23, 10, 188, DateTimeKind.Unspecified).AddTicks(8963), new TimeSpan(0, 3, 0, 0, 0)),
                            Description = "Description of product Vintage Inspired Classic",
                            IsDeleted = false,
                            Material = "",
                            Name = "Vintage Inspired Classic",
                            Price = 93.20m,
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 9, 24, 10, 23, 10, 188, DateTimeKind.Unspecified).AddTicks(8965), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 9, 24, 10, 23, 10, 188, DateTimeKind.Unspecified).AddTicks(8971), new TimeSpan(0, 3, 0, 0, 0)),
                            Description = "Description of product Shirt in Stretch Cotton",
                            IsDeleted = false,
                            Material = "60% cotton, 40% polyester",
                            Name = "Shirt in Stretch Cotton",
                            Price = 52.66m,
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 9, 24, 10, 23, 10, 188, DateTimeKind.Unspecified).AddTicks(8973), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 9, 24, 10, 23, 10, 188, DateTimeKind.Unspecified).AddTicks(8977), new TimeSpan(0, 3, 0, 0, 0)),
                            Description = "Description of product Pieces Metallic Printed",
                            IsDeleted = false,
                            Material = "60% cotton, 40% polyester",
                            Name = "Pieces Metallic Printed",
                            Price = 18.96m,
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 9, 24, 10, 23, 10, 188, DateTimeKind.Unspecified).AddTicks(8980), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 3,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 9, 24, 10, 23, 10, 188, DateTimeKind.Unspecified).AddTicks(8984), new TimeSpan(0, 3, 0, 0, 0)),
                            Description = "Description of product Converse All Star Hi Plimsolls",
                            IsDeleted = false,
                            Material = "60% cotton, 40% polyester",
                            Name = "Converse All Star Hi Plimsolls",
                            Price = 75.00m,
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 9, 24, 10, 23, 10, 188, DateTimeKind.Unspecified).AddTicks(8986), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 9, 24, 10, 23, 10, 188, DateTimeKind.Unspecified).AddTicks(8991), new TimeSpan(0, 3, 0, 0, 0)),
                            Description = "Description of product Femme T-Shirt In Stripe",
                            IsDeleted = false,
                            Material = "60% cotton, 40% polyester",
                            Name = "Femme T-Shirt In Stripe",
                            Price = 25.85m,
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 9, 24, 10, 23, 10, 188, DateTimeKind.Unspecified).AddTicks(8993), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 2,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 9, 24, 10, 23, 10, 188, DateTimeKind.Unspecified).AddTicks(8998), new TimeSpan(0, 3, 0, 0, 0)),
                            Description = "Description of product Herschel supply",
                            IsDeleted = false,
                            Material = "60% cotton, 40% polyester",
                            Name = "Herschel supply",
                            Price = 63.16m,
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 9, 24, 10, 23, 10, 188, DateTimeKind.Unspecified).AddTicks(9000), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 2,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 9, 24, 10, 23, 10, 188, DateTimeKind.Unspecified).AddTicks(9004), new TimeSpan(0, 3, 0, 0, 0)),
                            Description = "Description of product Herschel supply",
                            IsDeleted = false,
                            Material = "100% leather",
                            Name = "Herschel supply",
                            Price = 63.15m,
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 9, 24, 10, 23, 10, 188, DateTimeKind.Unspecified).AddTicks(9007), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 9, 24, 10, 23, 10, 188, DateTimeKind.Unspecified).AddTicks(9011), new TimeSpan(0, 3, 0, 0, 0)),
                            Description = "Description of product T-Shirt with Sleeve",
                            IsDeleted = false,
                            Material = "60% cotton, 40% polyester",
                            Name = "T-Shirt with Sleeve",
                            Price = 18.49m,
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 9, 24, 10, 23, 10, 188, DateTimeKind.Unspecified).AddTicks(9014), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 9, 24, 10, 23, 10, 188, DateTimeKind.Unspecified).AddTicks(9018), new TimeSpan(0, 3, 0, 0, 0)),
                            Description = "Description of product Pretty Little Thing",
                            IsDeleted = false,
                            Material = "60% cotton, 40% polyester",
                            Name = "Pretty Little Thing",
                            Price = 54.79m,
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 9, 24, 10, 23, 10, 188, DateTimeKind.Unspecified).AddTicks(9021), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 15,
                            CategoryId = 4,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 9, 24, 10, 23, 10, 188, DateTimeKind.Unspecified).AddTicks(9025), new TimeSpan(0, 3, 0, 0, 0)),
                            Description = "Description of product Mini Silver Mesh Watch",
                            IsDeleted = false,
                            Material = "",
                            Name = "Mini Silver Mesh Watch",
                            Price = 86.85m,
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 9, 24, 10, 23, 10, 188, DateTimeKind.Unspecified).AddTicks(9027), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 16,
                            CategoryId = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 9, 24, 10, 23, 10, 188, DateTimeKind.Unspecified).AddTicks(9032), new TimeSpan(0, 3, 0, 0, 0)),
                            Description = "Description of product Square Neck Back",
                            IsDeleted = false,
                            Material = "60% cotton, 40% polyester",
                            Name = "Square Neck Back",
                            Price = 29.64m,
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 9, 24, 10, 23, 10, 188, DateTimeKind.Unspecified).AddTicks(9034), new TimeSpan(0, 3, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("CozaStoreAPI.Infrastructure.Data.Models.ProductColor", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("integer")
                        .HasComment("The product's id");

                    b.Property<int>("ColorId")
                        .HasColumnType("integer")
                        .HasComment("The size's id");

                    b.HasKey("ProductId", "ColorId");

                    b.HasIndex("ColorId");

                    b.ToTable("ProductsColors", t =>
                        {
                            t.HasComment("Many to many relation between products and colors");
                        });

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            ColorId = 1
                        },
                        new
                        {
                            ProductId = 1,
                            ColorId = 2
                        },
                        new
                        {
                            ProductId = 1,
                            ColorId = 3
                        },
                        new
                        {
                            ProductId = 1,
                            ColorId = 4
                        },
                        new
                        {
                            ProductId = 1,
                            ColorId = 5
                        },
                        new
                        {
                            ProductId = 2,
                            ColorId = 1
                        },
                        new
                        {
                            ProductId = 2,
                            ColorId = 2
                        },
                        new
                        {
                            ProductId = 2,
                            ColorId = 3
                        },
                        new
                        {
                            ProductId = 2,
                            ColorId = 4
                        },
                        new
                        {
                            ProductId = 2,
                            ColorId = 5
                        },
                        new
                        {
                            ProductId = 3,
                            ColorId = 1
                        },
                        new
                        {
                            ProductId = 3,
                            ColorId = 2
                        },
                        new
                        {
                            ProductId = 3,
                            ColorId = 3
                        },
                        new
                        {
                            ProductId = 3,
                            ColorId = 4
                        },
                        new
                        {
                            ProductId = 3,
                            ColorId = 5
                        },
                        new
                        {
                            ProductId = 4,
                            ColorId = 1
                        },
                        new
                        {
                            ProductId = 4,
                            ColorId = 2
                        },
                        new
                        {
                            ProductId = 4,
                            ColorId = 3
                        },
                        new
                        {
                            ProductId = 4,
                            ColorId = 4
                        },
                        new
                        {
                            ProductId = 4,
                            ColorId = 5
                        },
                        new
                        {
                            ProductId = 5,
                            ColorId = 1
                        },
                        new
                        {
                            ProductId = 5,
                            ColorId = 2
                        },
                        new
                        {
                            ProductId = 5,
                            ColorId = 3
                        },
                        new
                        {
                            ProductId = 5,
                            ColorId = 4
                        },
                        new
                        {
                            ProductId = 5,
                            ColorId = 5
                        },
                        new
                        {
                            ProductId = 7,
                            ColorId = 1
                        },
                        new
                        {
                            ProductId = 7,
                            ColorId = 2
                        },
                        new
                        {
                            ProductId = 7,
                            ColorId = 3
                        },
                        new
                        {
                            ProductId = 7,
                            ColorId = 4
                        },
                        new
                        {
                            ProductId = 7,
                            ColorId = 5
                        },
                        new
                        {
                            ProductId = 8,
                            ColorId = 1
                        },
                        new
                        {
                            ProductId = 8,
                            ColorId = 2
                        },
                        new
                        {
                            ProductId = 8,
                            ColorId = 3
                        },
                        new
                        {
                            ProductId = 8,
                            ColorId = 4
                        },
                        new
                        {
                            ProductId = 8,
                            ColorId = 5
                        },
                        new
                        {
                            ProductId = 9,
                            ColorId = 1
                        },
                        new
                        {
                            ProductId = 9,
                            ColorId = 2
                        },
                        new
                        {
                            ProductId = 9,
                            ColorId = 3
                        },
                        new
                        {
                            ProductId = 9,
                            ColorId = 4
                        },
                        new
                        {
                            ProductId = 9,
                            ColorId = 5
                        },
                        new
                        {
                            ProductId = 10,
                            ColorId = 1
                        },
                        new
                        {
                            ProductId = 10,
                            ColorId = 2
                        },
                        new
                        {
                            ProductId = 10,
                            ColorId = 3
                        },
                        new
                        {
                            ProductId = 10,
                            ColorId = 4
                        },
                        new
                        {
                            ProductId = 10,
                            ColorId = 5
                        },
                        new
                        {
                            ProductId = 11,
                            ColorId = 1
                        },
                        new
                        {
                            ProductId = 11,
                            ColorId = 2
                        },
                        new
                        {
                            ProductId = 11,
                            ColorId = 3
                        },
                        new
                        {
                            ProductId = 11,
                            ColorId = 4
                        },
                        new
                        {
                            ProductId = 11,
                            ColorId = 5
                        },
                        new
                        {
                            ProductId = 12,
                            ColorId = 2
                        },
                        new
                        {
                            ProductId = 12,
                            ColorId = 5
                        },
                        new
                        {
                            ProductId = 13,
                            ColorId = 1
                        },
                        new
                        {
                            ProductId = 13,
                            ColorId = 2
                        },
                        new
                        {
                            ProductId = 13,
                            ColorId = 3
                        },
                        new
                        {
                            ProductId = 13,
                            ColorId = 4
                        },
                        new
                        {
                            ProductId = 13,
                            ColorId = 5
                        },
                        new
                        {
                            ProductId = 14,
                            ColorId = 1
                        },
                        new
                        {
                            ProductId = 14,
                            ColorId = 2
                        },
                        new
                        {
                            ProductId = 14,
                            ColorId = 3
                        },
                        new
                        {
                            ProductId = 14,
                            ColorId = 4
                        },
                        new
                        {
                            ProductId = 14,
                            ColorId = 5
                        },
                        new
                        {
                            ProductId = 16,
                            ColorId = 1
                        },
                        new
                        {
                            ProductId = 16,
                            ColorId = 2
                        },
                        new
                        {
                            ProductId = 16,
                            ColorId = 3
                        },
                        new
                        {
                            ProductId = 16,
                            ColorId = 4
                        },
                        new
                        {
                            ProductId = 16,
                            ColorId = 5
                        });
                });

            modelBuilder.Entity("CozaStoreAPI.Infrastructure.Data.Models.ProductSize", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("integer")
                        .HasComment("The product's id");

                    b.Property<int>("SizeId")
                        .HasColumnType("integer")
                        .HasComment("The size's id");

                    b.HasKey("ProductId", "SizeId");

                    b.HasIndex("SizeId");

                    b.ToTable("ProductsSizes", t =>
                        {
                            t.HasComment("Many to many relation between products and sizes");
                        });

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            SizeId = 1
                        },
                        new
                        {
                            ProductId = 1,
                            SizeId = 2
                        },
                        new
                        {
                            ProductId = 1,
                            SizeId = 3
                        },
                        new
                        {
                            ProductId = 1,
                            SizeId = 4
                        },
                        new
                        {
                            ProductId = 1,
                            SizeId = 5
                        },
                        new
                        {
                            ProductId = 2,
                            SizeId = 1
                        },
                        new
                        {
                            ProductId = 2,
                            SizeId = 2
                        },
                        new
                        {
                            ProductId = 2,
                            SizeId = 3
                        },
                        new
                        {
                            ProductId = 2,
                            SizeId = 4
                        },
                        new
                        {
                            ProductId = 2,
                            SizeId = 5
                        },
                        new
                        {
                            ProductId = 3,
                            SizeId = 1
                        },
                        new
                        {
                            ProductId = 3,
                            SizeId = 2
                        },
                        new
                        {
                            ProductId = 3,
                            SizeId = 3
                        },
                        new
                        {
                            ProductId = 3,
                            SizeId = 4
                        },
                        new
                        {
                            ProductId = 3,
                            SizeId = 5
                        },
                        new
                        {
                            ProductId = 4,
                            SizeId = 1
                        },
                        new
                        {
                            ProductId = 4,
                            SizeId = 2
                        },
                        new
                        {
                            ProductId = 4,
                            SizeId = 3
                        },
                        new
                        {
                            ProductId = 4,
                            SizeId = 4
                        },
                        new
                        {
                            ProductId = 4,
                            SizeId = 5
                        },
                        new
                        {
                            ProductId = 5,
                            SizeId = 1
                        },
                        new
                        {
                            ProductId = 5,
                            SizeId = 2
                        },
                        new
                        {
                            ProductId = 5,
                            SizeId = 3
                        },
                        new
                        {
                            ProductId = 5,
                            SizeId = 4
                        },
                        new
                        {
                            ProductId = 5,
                            SizeId = 5
                        },
                        new
                        {
                            ProductId = 7,
                            SizeId = 1
                        },
                        new
                        {
                            ProductId = 7,
                            SizeId = 2
                        },
                        new
                        {
                            ProductId = 7,
                            SizeId = 3
                        },
                        new
                        {
                            ProductId = 7,
                            SizeId = 4
                        },
                        new
                        {
                            ProductId = 7,
                            SizeId = 5
                        },
                        new
                        {
                            ProductId = 8,
                            SizeId = 1
                        },
                        new
                        {
                            ProductId = 8,
                            SizeId = 2
                        },
                        new
                        {
                            ProductId = 8,
                            SizeId = 3
                        },
                        new
                        {
                            ProductId = 8,
                            SizeId = 4
                        },
                        new
                        {
                            ProductId = 8,
                            SizeId = 5
                        },
                        new
                        {
                            ProductId = 9,
                            SizeId = 6
                        },
                        new
                        {
                            ProductId = 9,
                            SizeId = 7
                        },
                        new
                        {
                            ProductId = 9,
                            SizeId = 8
                        },
                        new
                        {
                            ProductId = 9,
                            SizeId = 9
                        },
                        new
                        {
                            ProductId = 10,
                            SizeId = 1
                        },
                        new
                        {
                            ProductId = 10,
                            SizeId = 2
                        },
                        new
                        {
                            ProductId = 10,
                            SizeId = 3
                        },
                        new
                        {
                            ProductId = 10,
                            SizeId = 4
                        },
                        new
                        {
                            ProductId = 10,
                            SizeId = 5
                        },
                        new
                        {
                            ProductId = 11,
                            SizeId = 1
                        },
                        new
                        {
                            ProductId = 11,
                            SizeId = 2
                        },
                        new
                        {
                            ProductId = 11,
                            SizeId = 3
                        },
                        new
                        {
                            ProductId = 11,
                            SizeId = 4
                        },
                        new
                        {
                            ProductId = 11,
                            SizeId = 5
                        },
                        new
                        {
                            ProductId = 12,
                            SizeId = 11
                        },
                        new
                        {
                            ProductId = 12,
                            SizeId = 12
                        },
                        new
                        {
                            ProductId = 12,
                            SizeId = 13
                        },
                        new
                        {
                            ProductId = 12,
                            SizeId = 14
                        },
                        new
                        {
                            ProductId = 13,
                            SizeId = 1
                        },
                        new
                        {
                            ProductId = 13,
                            SizeId = 2
                        },
                        new
                        {
                            ProductId = 13,
                            SizeId = 3
                        },
                        new
                        {
                            ProductId = 13,
                            SizeId = 4
                        },
                        new
                        {
                            ProductId = 13,
                            SizeId = 5
                        },
                        new
                        {
                            ProductId = 14,
                            SizeId = 1
                        },
                        new
                        {
                            ProductId = 14,
                            SizeId = 2
                        },
                        new
                        {
                            ProductId = 14,
                            SizeId = 3
                        },
                        new
                        {
                            ProductId = 14,
                            SizeId = 4
                        },
                        new
                        {
                            ProductId = 14,
                            SizeId = 5
                        },
                        new
                        {
                            ProductId = 16,
                            SizeId = 1
                        },
                        new
                        {
                            ProductId = 16,
                            SizeId = 2
                        },
                        new
                        {
                            ProductId = 16,
                            SizeId = 3
                        },
                        new
                        {
                            ProductId = 16,
                            SizeId = 4
                        },
                        new
                        {
                            ProductId = 16,
                            SizeId = 5
                        });
                });

            modelBuilder.Entity("CozaStoreAPI.Infrastructure.Data.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasComment("The review's primary key");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid")
                        .HasComment("The author Id");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasComment("The comment of the review.");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("The date when the review was created.");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer")
                        .HasComment("The product Id");

                    b.Property<int>("Rating")
                        .HasColumnType("integer")
                        .HasComment("The rating of the review.");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasComment("The title of the review.");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ProductId");

                    b.ToTable("Reviews", t =>
                        {
                            t.HasComment("The review of the product");
                        });
                });

            modelBuilder.Entity("CozaStoreAPI.Infrastructure.Data.Models.Size", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasComment("The size's primary key");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("The size's name");

                    b.HasKey("Id");

                    b.ToTable("Sizes", t =>
                        {
                            t.HasComment("The size of the product");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "XS"
                        },
                        new
                        {
                            Id = 2,
                            Name = "S"
                        },
                        new
                        {
                            Id = 3,
                            Name = "M"
                        },
                        new
                        {
                            Id = 4,
                            Name = "L"
                        },
                        new
                        {
                            Id = 5,
                            Name = "XL"
                        },
                        new
                        {
                            Id = 6,
                            Name = "36"
                        },
                        new
                        {
                            Id = 7,
                            Name = "37"
                        },
                        new
                        {
                            Id = 8,
                            Name = "38"
                        },
                        new
                        {
                            Id = 9,
                            Name = "39"
                        },
                        new
                        {
                            Id = 10,
                            Name = "40"
                        },
                        new
                        {
                            Id = 11,
                            Name = "85"
                        },
                        new
                        {
                            Id = 12,
                            Name = "90"
                        },
                        new
                        {
                            Id = 13,
                            Name = "95"
                        },
                        new
                        {
                            Id = 14,
                            Name = "100"
                        });
                });

            modelBuilder.Entity("CozaStoreAPI.Infrastructure.Data.Models.WishUser", b =>
                {
                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uuid")
                        .HasComment("The user id");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer")
                        .HasComment("The product id");

                    b.HasKey("AppUserId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("Wishes", t =>
                        {
                            t.HasComment("This table contains the products that the user has added to his wish list");
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CozaStoreAPI.Infrastructure.Data.Models.ImageProduct", b =>
                {
                    b.HasOne("CozaStoreAPI.Infrastructure.Data.Models.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CozaStoreAPI.Infrastructure.Data.Models.ImageReview", b =>
                {
                    b.HasOne("CozaStoreAPI.Infrastructure.Data.Models.Review", "Review")
                        .WithMany("Images")
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Review");
                });

            modelBuilder.Entity("CozaStoreAPI.Infrastructure.Data.Models.Product", b =>
                {
                    b.HasOne("CozaStoreAPI.Infrastructure.Data.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("CozaStoreAPI.Infrastructure.Data.Models.ProductColor", b =>
                {
                    b.HasOne("CozaStoreAPI.Infrastructure.Data.Models.Color", "Color")
                        .WithMany("ProductsColors")
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CozaStoreAPI.Infrastructure.Data.Models.Product", "Product")
                        .WithMany("Colors")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Color");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CozaStoreAPI.Infrastructure.Data.Models.ProductSize", b =>
                {
                    b.HasOne("CozaStoreAPI.Infrastructure.Data.Models.Product", "Product")
                        .WithMany("Sizes")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CozaStoreAPI.Infrastructure.Data.Models.Size", "Size")
                        .WithMany("ProductsSizes")
                        .HasForeignKey("SizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("CozaStoreAPI.Infrastructure.Data.Models.Review", b =>
                {
                    b.HasOne("CozaStoreAPI.Infrastructure.Data.Models.AppUser", "Author")
                        .WithMany("Reviews")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CozaStoreAPI.Infrastructure.Data.Models.Product", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CozaStoreAPI.Infrastructure.Data.Models.WishUser", b =>
                {
                    b.HasOne("CozaStoreAPI.Infrastructure.Data.Models.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CozaStoreAPI.Infrastructure.Data.Models.Product", "Product")
                        .WithMany("WishesUsers")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("CozaStoreAPI.Infrastructure.Data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("CozaStoreAPI.Infrastructure.Data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CozaStoreAPI.Infrastructure.Data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("CozaStoreAPI.Infrastructure.Data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CozaStoreAPI.Infrastructure.Data.Models.AppUser", b =>
                {
                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("CozaStoreAPI.Infrastructure.Data.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("CozaStoreAPI.Infrastructure.Data.Models.Color", b =>
                {
                    b.Navigation("ProductsColors");
                });

            modelBuilder.Entity("CozaStoreAPI.Infrastructure.Data.Models.Product", b =>
                {
                    b.Navigation("Colors");

                    b.Navigation("Images");

                    b.Navigation("Reviews");

                    b.Navigation("Sizes");

                    b.Navigation("WishesUsers");
                });

            modelBuilder.Entity("CozaStoreAPI.Infrastructure.Data.Models.Review", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("CozaStoreAPI.Infrastructure.Data.Models.Size", b =>
                {
                    b.Navigation("ProductsSizes");
                });
#pragma warning restore 612, 618
        }
    }
}
